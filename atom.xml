<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Eakamm.github.io</id>
    <title>刘志豪的博客</title>
    <updated>2021-08-31T07:46:30.023Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Eakamm.github.io"/>
    <link rel="self" href="https://Eakamm.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Eakamm.github.io/images/avatar.png</logo>
    <icon>https://Eakamm.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 刘志豪的博客</rights>
    <entry>
        <title type="html"><![CDATA[windows注册系统服务（实现开机自启）]]></title>
        <id>https://Eakamm.github.io/post/windows-zhu-ce-xi-tong-fu-wu-shi-xian-kai-ji-zi-qi/</id>
        <link href="https://Eakamm.github.io/post/windows-zhu-ce-xi-tong-fu-wu-shi-xian-kai-ji-zi-qi/">
        </link>
        <updated>2021-08-31T07:37:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-nginx">1、nginx</h1>
<p>我们借助 Windows Service Wrapper 小工具，将 Nginx 转换为 Windows 服务，在服务中心配置自启动，从而在开机时 windows 自行启动 Nginx 服务。</p>
<h3 id="1-自启动工具下载">1、自启动工具下载</h3>
<p>工具下载 URL：<a href="https://github.com/winsw/winsw/releases">https://github.com/winsw/winsw/releases</a></p>
<p>如下图，为<code>windows32位和64位</code>的工具文件</p>
<figure data-type="image" tabindex="1"><img src="E:%5CPictures%5CImageBed%5C20210510172312682.png" alt="" loading="lazy"></figure>
<p>上面 github 需要外网访问比较快，没有外网的同学们，我也给你们下好了，自行下载吧~</p>
<ul>
<li>32 位：<a href="https://pan.baidu.com/s/1gofHYQTxDmLhytKyBl928g">WinSW-x86.exe （提取码：0915）</a></li>
<li>64 位：<a href="https://pan.baidu.com/s/1gofHYQTxDmLhytKyBl928g">WinSW-x64.exe （提取码：0915）</a></li>
</ul>
<h3 id="2-自启动工具安装">2、自启动工具安装</h3>
<ul>
<li>
<p><strong>步骤一</strong>：下载后将该工具放入 Nginx 的安装目录下，并且将其<code>重命名为 nginx-service.exe</code> ；</p>
</li>
<li>
<p><strong>步骤二</strong>：在 nginx 安装目录下新建服务日志文件夹 server-logs 文件夹, 用来存放 nginx 服务相关日志。</p>
</li>
<li>
<p><strong>步骤三</strong>：在该目录下新建 nginx-service.xml 文件，写入配置信息，配置好了之后就可以通过这个将 Nginx 注册为 Windows 服务了。</p>
</li>
</ul>
<p>文件配置内容如下：重点包括三个，日志文件位置、启动命令、关闭命令；我 nginx 目录为：<code>D:\work\nginx\nginx-1.18.0</code>，同学们根据自己的目录作相应修改。</p>
<pre><code>&lt;!-- nginx-service.xml --&gt;
&lt;service&gt;
    &lt;id&gt;nginx&lt;/id&gt;
    &lt;name&gt;nginx&lt;/name&gt;
    &lt;description&gt;nginx&lt;/description&gt;
    &lt;logpath&gt;D:\work\nginx\nginx-1.18.0\server-logs\&lt;/logpath&gt;
    &lt;logmode&gt;roll&lt;/logmode&gt;
    &lt;depend&gt;&lt;/depend&gt;
    &lt;executable&gt;D:\work\nginx\nginx-1.18.0\nginx.exe&lt;/executable&gt;
    &lt;stopexecutable&gt;D:\work\nginx\nginx-1.18.0\nginx.exe -s stop&lt;/stopexecutable&gt;
&lt;/service&gt;
</code></pre>
<h3 id="3-把-nginx-加入到-windows-服务中">3、把 nginx 加入到 windows 服务中</h3>
<p>以上内容配置好了之后，在 nginx 安装目录下以管理员运行命令：<code>.\nginx-service.exe install</code> 就成功将其注册为 Windows 服务了。这时我们就可以在 Windows 任务管理器的服务中查看到 nginx 服务了。<br>
<img src="https://cdn.jsdelivr.net/gh/1134642046/ImageBed/JavaLearn/20210510171746707.png" alt="" loading="lazy"></p>
<p>后续修改 windows 服务的流程同学们应该都清楚了，将启动方式改成自动即可；<br>
<img src="https://cdn.jsdelivr.net/gh/1134642046/ImageBed/JavaLearn/20210510171912942.png" alt="" loading="lazy"></p>
<p>然后启动 nginx 服务<br>
<img src="https://cdn.jsdelivr.net/gh/1134642046/ImageBed/JavaLearn/20210510172007508.png" alt="" loading="lazy"></p>
<p>启动后通过<code>http://localhost:80</code> 或 命令 <code>tasklist /fi &quot;imagename eq nginx.exe&quot;</code> 检查是否启动成功</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/1134642046/ImageBed/JavaLearn/20210510172028928.png" alt="" loading="lazy"></figure>
<p>附：工具其他命令</p>
<table><thead><tr><th align="left">效果</th><th align="left">命令</th></tr></thead><tbody><tr><td align="left">注册系统服务命令</td><td align="left">nginx-service.exe install</td></tr><tr><td align="left">删除已注册的系统服务命令</td><td align="left">nginx-service.exe uninstall</td></tr><tr><td align="left">停止对应的系统服务命令</td><td align="left">nginx-service.exe stop</td></tr><tr><td align="left">启动对应的系统服务命令</td><td align="left">nginx-service.exe start</td></tr></tbody></table>
<h1 id="2-java项目">2、Java项目</h1>
<h3 id="1-下载-winswexe-和-xml注意可能需要安装-net-framework4">1. 下载 winsw.exe 和. xml(注意：可能需要安装 .net framework4)</h3>
<p>地址：<a href="https://github.com/winsw/winsw/releases">https://github.com/winsw/winsw/releases</a></p>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/1134642046/ImageBed/JavaLearn/20191108114411173.png" alt="" loading="lazy"></figure>
<h3 id="2-与-jar-包同路径同名改名-exe-与-xml-并配置-xxxxml">2. 与 jar 包同路径，同名，改名. exe 与. xml 并配置 xxx.xml</h3>
<p>配置说明 :https://github.com/kohsuke/winsw/blob/master/doc/xmlConfigFile.md</p>
<p>我的配置:</p>
<pre><code>&lt;service&gt;
  &lt;!-- ID of the service. It should be unique accross the Windows system--&gt;
    &lt;!--服务ID：启动、关闭、删除服务时，都是通过ID来操作的--&gt;
  &lt;id&gt;file-service&lt;/id&gt;
  &lt;!-- Display name of the service --&gt;
  &lt;name&gt;file-service&lt;/name&gt;
  &lt;!-- Service description --&gt;
  &lt;description&gt;fileservice&lt;/description&gt;
  
  &lt;!-- Path to the executable, which should be started --&gt;
    &lt;!--当前电脑配置了java环境变量，直接写成“java”就行；你也可以写成类似这样：D:\develop\jdk1.8\jre\bin\java--&gt;
  &lt;executable&gt;java&lt;/executable&gt;
    &lt;!--&lt;arguments&gt;-jar &quot;C:\Users\Administrator\Desktop\winsw\statement-0.0.1-SNAPSHOT.jar&quot;&lt;/arguments&gt;--&gt;
  &lt;arguments&gt;-jar file-service.jar -Xms512M -Xmx512M&lt;/arguments&gt;
 
  &lt;!--
    OPTION: onfailure
    Defines a sequence of actions, which should be performed if the managed executable fails.
    Supported actions: restart, reboot, none
  --&gt;
  &lt;onfailure action=&quot;restart&quot; delay=&quot;10 sec&quot;/&gt;
  &lt;onfailure action=&quot;restart&quot; delay=&quot;20 sec&quot;/&gt;
  &lt;!--
    OPTION: resetfailure
    Time, after which the Windows service resets the failure status.
    Default value: 1 day
  --&gt;
  &lt;resetfailure&gt;1 hour&lt;/resetfailure&gt;
  &lt;!--
    OPTION: priority
    Desired process priority.
    Possible values: Normal, Idle, High, RealTime, BelowNormal, AboveNormal
    Default value: Normal
  --&gt;
  &lt;priority&gt;Normal&lt;/priority&gt;
  
  &lt;!-- 
    OPTION: stoptimeout
    Time to wait for the service to gracefully shutdown the executable before we forcibly kill it
    Default value: 15 seconds
  --&gt;
  &lt;stoptimeout&gt;15 sec&lt;/stoptimeout&gt;
    
  &lt;!--
    OPTION: stopparentprocessfirst
    If set, WinSW will terminate the parent process before stopping the children.
    Default value: false
  --&gt;
  &lt;stopparentprocessfirst&gt;false&lt;/stopparentprocessfirst&gt;
 
    &lt;!--
      OPTION: startmode
      Defines start mode of the service.
      Supported modes: Automatic, Manual, Boot, System (latter ones are supported for driver services only)
      Default mode: Automatic
    --&gt;
    &lt;startmode&gt;Automatic&lt;/startmode&gt;
    &lt;waithint&gt;15 sec&lt;/waithint&gt;
    &lt;sleeptime&gt;1 sec&lt;/sleeptime&gt;
  &lt;log mode=&quot;roll-by-size&quot;&gt;
  &lt;sizeThreshold&gt;10240&lt;/sizeThreshold&gt;
  &lt;keepFiles&gt;8&lt;/keepFiles&gt;
&lt;/log&gt;
&lt;/service&gt;
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://cdn.jsdelivr.net/gh/1134642046/ImageBed/JavaLearn/20191108114427356.png" alt="" loading="lazy"></figure>
<h3 id="3cmd-命令行输入-xxxexe-install-安装服务">3.cmd 命令行，输入 xxx.exe install 安装服务</h3>
<figure data-type="image" tabindex="5"><img src="https://cdn.jsdelivr.net/gh/1134642046/ImageBed/JavaLearn/2019110811443395.png" alt="" loading="lazy"></figure>
<p>如果权限不足，需要进入 c:\windows\System32 目录下，用管理员权限运行 cmd</p>
<h3 id="4net-start-xxx-启动服务">4.net start xxx 启动服务</h3>
<figure data-type="image" tabindex="6"><img src="https://cdn.jsdelivr.net/gh/1134642046/ImageBed/JavaLearn/20191108114441613.png" alt="" loading="lazy"></figure>
<p>net stop xxx 关闭服务</p>
<p>sc delete xxx 删除服务</p>
<p>参考资料:</p>
<p><a href="https://blog.csdn.net/lee008108/article/details/78713385">https://blog.csdn.net/lee008108/article/details/78713385</a></p>
<p><a href="https://blog.csdn.net/Pruett/article/details/92813229">https://blog.csdn.net/Pruett/article/details/92813229</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ElementUI 树形控件使用setCheckedKeys未定义]]></title>
        <id>https://Eakamm.github.io/post/elementui-shu-xing-kong-jian-shi-yong-setcheckedkeys-wei-ding-yi/</id>
        <link href="https://Eakamm.github.io/post/elementui-shu-xing-kong-jian-shi-yong-setcheckedkeys-wei-ding-yi/">
        </link>
        <updated>2021-04-30T08:15:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题">问题：</h2>
<pre><code class="language-html">&lt;el-dialog :title=&quot;title&quot; :visible.sync=&quot;open&quot; width=&quot;800px&quot; append-to-body&gt;
    &lt;el-tree
        :data=&quot;deptOptions&quot;
        :props=&quot;defaultProps&quot;
        :expand-on-click-node=&quot;false&quot;
        :filter-node-method=&quot;filterNode&quot;
        show-checkbox
        node-key=&quot;id&quot;
        ref=&quot;tree&quot;
        default-expand-all
        @check=&quot;handleNodeClick&quot;
    /&gt;
&lt;/el-dialog&gt;
</code></pre>
<p>当点击新增时候，因为<code>this.dialogVisible = true</code>时并没有立即更新dom，而是等整个逻辑执行完后再一次新渲染，因此此时的弹框并未渲染，在dom树中是不存在的，this.$refs.tree is undefined的所以setCheckedKeys肯定也是undefined。</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/Eakamm/ImageBed/JavaLearn/20210430162237.png" alt="未定义" loading="lazy"></figure>
<pre><code class="language-js">handleUpdate(row) {
      this.reset();
      this.getTreeselect();
      const id = row.id || this.ids
      getVoteRole(id).then(response =&gt; {
        this.form = response.data;
        let treeSelectKey = [];
        this.form.workVoteUsers.forEach( user =&gt; {
          treeSelectKey.push(user.userId)
        })
        this.open = true;
        this.title = &quot;修改投票角色&quot;;
        this.setCheckedKeys()
      });
    },
    setCheckedKeys(){
      console.log(this.$refs.tree)
    }
</code></pre>
<h2 id="解决方法">解决方法:</h2>
<p>this.$nextTick()，this.$nextTick()会在dom更新之后在执行回调：</p>
<pre><code class="language-js">
opetation (auth) {
  this.dialogVisible = true
  this.$nextTick(function() {
    this.$refs.tree.setCheckedKeys(auth)
  })
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue监听全部属性变化]]></title>
        <id>https://Eakamm.github.io/post/vue-jian-ting-quan-bu-shu-xing-bian-hua/</id>
        <link href="https://Eakamm.github.io/post/vue-jian-ting-quan-bu-shu-xing-bian-hua/">
        </link>
        <updated>2021-04-28T08:38:04.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://blog.csdn.net/weixin_30876945/article/details/99487553">blog.csdn.net</a></p>
</blockquote>
<p>问题： 在 vue 项目中，现在遇到这样一个问题; 从父组件接受一个对象 obj1，并将这个对象赋值给子组件的 obj2；obj2 是一个表单的各项值，在开始的时候，我是通过 watch 监听整个 obj2 的变化，要获取 obj2 的值；但是现在我接受从父组件传递过来的 obj1 值时；只是在第一次赋值的时候，监听到了 obj2 的变化，当我更改里面属性的时候，后来发现我是对整个 obj2 进行监听（因为 obj2 已经通过了（ <code>Vue.set(object, key, value)</code> 方法向嵌套对象添加响应式属性），所以这里只会监听里面属性的增加和减少（），并不会对属性的值更改进行监听；</p>
<p>显而易见： 我需要重新监听一个对象里面每一个属性值的变化：</p>
<p>查阅资料发现：watch 中的这两个选项<code>deep</code>、<code>immediate</code></p>
<p><strong>选项：deep</strong></p>
<p>在选项参数中指定 <code>deep: true</code>，可以监听对象中属性的变化。</p>
<p><strong>选项：immediate</strong></p>
<p>在选项参数中指定 immediate: true, 将立即以表达式的当前值触发回调，也就是立即触发一次。</p>
<pre><code class="language-js">watch: {
        obj: {
          handler(val, oldVal) {
            console.log('属性发生变化触发这个回调',val, oldVal);
          },
          deep: true // 监听这个对象中的每一个属性变化
        },
        step: { // 属性
          //watch
          handler(val, oldVal) {
            console.log(&quot;默认立即触发一次&quot;, val, oldVal);
          },
          immediate: true // 默认立即触发一次
        },
      },
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[定时任务常用CRON表达式]]></title>
        <id>https://Eakamm.github.io/post/ding-shi-ren-wu-chang-yong-cron-biao-da-shi/</id>
        <link href="https://Eakamm.github.io/post/ding-shi-ren-wu-chang-yong-cron-biao-da-shi/">
        </link>
        <updated>2021-04-21T03:33:58.000Z</updated>
        <summary type="html"><![CDATA[<p>系统中通常有些需要自动执行的任务，这些任务可能每隔一段时间就要执行一次，也可能需要在指定的时间点自动执行，这些任务的自定执行必须使用任务的自动调度。<br>
Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义</p>
]]></summary>
        <content type="html"><![CDATA[<p>系统中通常有些需要自动执行的任务，这些任务可能每隔一段时间就要执行一次，也可能需要在指定的时间点自动执行，这些任务的自定执行必须使用任务的自动调度。<br>
Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义</p>
<!-- more -->
<blockquote>
<p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://blog.csdn.net/qq_33432559/article/details/75633767">blog.csdn.net</a></p>
</blockquote>
<p>Cron 表达式是一个字符串，字符串以 5 或 6 个空格隔开，分为 6 或 7 个域，每一个域代表一个含义</p>
<p>格式：</p>
<ul>
<li><code>Seconds</code> <code>Minutes</code> <code>Hours</code> <code>DayofMonth</code> <code>Month</code> <code>DayofWeek</code> <code>Year</code></li>
<li><code>Seconds</code> <code>Minutes</code> <code>Hours</code> <code>DayofMonth</code> <code>Month</code> <code>DayofWeek</code></li>
</ul>
<h2 id="结构">结构</h2>
<p>Corn 从左到右（用空格隔开）：<code>秒</code> <code>分</code> <code>小时</code> <code>月份中的日期</code> <code>月份</code> <code>星期中的日期</code> <code>年份</code></p>
<h2 id="字段含义">字段含义</h2>
<table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒（Seconds）</td><td>0~59 的整数</td><td>, - * / 四个字符</td></tr><tr><td>分（<em>Minutes</em>）</td><td>0~59 的整数</td><td>, - * / 四个字符</td></tr><tr><td>小时（<em>Hours</em>）</td><td>0~23 的整数</td><td>, - * / 四个字符</td></tr><tr><td>日期（<em>DayofMonth</em>）</td><td>1~31 的整数（但是你需要考虑你月的天数）</td><td>,- * ? / L W C 八个字符</td></tr><tr><td>月份（<em>Month</em>）</td><td>1~12 的整数或者 JAN-DEC</td><td>, - * / 四个字符</td></tr><tr><td>星期（<em>DayofWeek</em>）</td><td>1~7 的整数或者 SUN-SAT （1=SUN）</td><td>, - * ? / L C # 八个字符</td></tr><tr><td>年 (可选，留空)（<em>Year</em>）</td><td>1970~2099</td><td>, - * / 四个字符</td></tr></tbody></table>
<p>下面为每周一上午 10 点 15 分执行任务</p>
<pre><code>0 15 10 ? * MON
</code></pre>
<p>每月 10 号 9 点 15 分钟执行任务</p>
<pre><code>0 15 9 10 * ?
</code></pre>
<p>其它规则附录表</p>
<table><tbody><tr><th>表示式</th><th>说明</th></tr><tr><td>"0 0 12 * * ?"</td><td>每天 12 点运行</td></tr><tr><td>"0 15 10 ? * *"</td><td>每天 10:15 运行</td></tr><tr><td>"0 15 10 * * ?"</td><td>每天 10:15 运行</td></tr><tr><td>"0 15 10 * * ? *"</td><td>每天 10:15 运行</td></tr><tr><td>"0 15 10 * * ? 2008"</td><td>在 2008 年的每天 10：15 运行</td></tr><tr><td>"0 * 14 * * ?"</td><td>每天 14 点到 15 点之间每分钟运行一次，开始于 14:00，结束于 14:59。</td></tr><tr><td>"0 0/5 14 * * ?"</td><td>每天 14 点到 15 点每 5 分钟运行一次，开始于 14:00，结束于 14:55。</td></tr><tr><td>"0 0/5 14,18 * * ?"</td><td>每天 14 点到 15 点每 5 分钟运行一次，此外每天 18 点到 19 点每 5 钟也运行一次。</td></tr><tr><td>"0 0-5 14 * * ?"</td><td>每天 14:00 点到 14:05，每分钟运行一次。</td></tr><tr><td>"0 10,44 14 ? 3 WED"</td><td>3 月每周三的 14:10 分到 14:44，每分钟运行一次。</td></tr><tr><td>"0 15 10 ? * MON-FRI"</td><td>每周一，二，三，四，五的 10:15 分运行。</td></tr><tr><td>"0 15 10 15 * ?"</td><td>每月 15 日 10:15 分运行。</td></tr><tr><td>"0 15 10 L * ?"</td><td>每月最后一天 10:15 分运行。</td></tr><tr><td>"0 15 10 ? * 6L"</td><td>每月最后一个星期五 10:15 分运行。</td></tr><tr><td>"0 15 10 ? * 6L 2007-2009"</td><td>在 2007,2008,2009 年每个月的最后一个星期五的 10:15 分运行。</td></tr><tr><td>"0 15 10 ? * 6#3"</td><td>每月第三个星期五的 10:15 分运行。</td></tr></tbody></table>
<p><strong>最后，推荐一个 cron 表达式生成器：</strong></p>
<p><a href="http://cron.qqe2.com/">http://cron.qqe2.com/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mybatis使用collection时一对多分页问题]]></title>
        <id>https://Eakamm.github.io/post/mybatis-shi-yong-collection-shi-yi-dui-duo-fen-ye-wen-ti/</id>
        <link href="https://Eakamm.github.io/post/mybatis-shi-yong-collection-shi-yi-dui-duo-fen-ye-wen-ti/">
        </link>
        <updated>2021-04-13T07:52:03.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-xml">&lt;resultMap type=&quot;BaseQuestion&quot; id=&quot;BaseQuestionResult&quot;&gt;
        &lt;result property=&quot;id&quot;    column=&quot;id&quot;    /&gt;
        &lt;result property=&quot;typeId&quot;    column=&quot;type_id&quot;    /&gt;
        &lt;result property=&quot;typeName&quot;    column=&quot;type_name&quot;    /&gt;
        &lt;result property=&quot;stem&quot;    column=&quot;stem&quot;    /&gt;
        &lt;result property=&quot;count&quot;    column=&quot;count&quot;    /&gt;
        &lt;result property=&quot;alloption&quot;    column=&quot;alloption&quot;    /&gt;
        &lt;result property=&quot;answer&quot;    column=&quot;answer&quot;    /&gt;
        &lt;result property=&quot;deleted&quot;    column=&quot;question_deleted&quot;    /&gt;
        &lt;result property=&quot;time&quot;    column=&quot;time&quot;    /&gt;
        &lt;result property=&quot;uptime&quot;    column=&quot;uptime&quot;    /&gt;
        &lt;result property=&quot;siteId&quot;    column=&quot;site_id&quot;    /&gt;
        &lt;collection property=&quot;options&quot; ofType=&quot;StudyQuestionOptions&quot; select=&quot;selectBaseQuestionOptionsList&quot; column=&quot;{questionId=id}&quot;&gt;
            &lt;result property=&quot;id&quot;    column=&quot;option_id&quot;    /&gt;
            &lt;result property=&quot;questionId&quot;    column=&quot;question_id&quot;    /&gt;
            &lt;result property=&quot;value&quot;    column=&quot;value&quot;    /&gt;
            &lt;result property=&quot;label&quot;    column=&quot;label&quot;    /&gt;
            &lt;result property=&quot;deleted&quot;    column=&quot;option_deleted&quot;    /&gt;
        &lt;/collection&gt;
    &lt;/resultMap&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mysql常用时间查询]]></title>
        <id>https://Eakamm.github.io/post/mysql-chang-yong-shi-jian-cha-xun/</id>
        <link href="https://Eakamm.github.io/post/mysql-chang-yong-shi-jian-cha-xun/">
        </link>
        <updated>2021-03-08T07:11:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="时间查询">时间查询</h1>
<h2 id="1-时间段查询">1、时间段查询</h2>
<pre><code class="language-mysql">-- 今天  
select fullName,addedTime from t_user where to_days(addedTime) &lt;= to_days(now()); 
-- 昨天  
select fullName,addedTime from t_user where to_days(NOW()) - TO_DAYS(addedTime) &lt;= 1;  
-- 近7天  
select fullName,addedTime from t_user where date_sub(CURDATE(),INTERVAL 7 DAY) &lt;= DATE(addedTime);  
-- 近30天  
SELECT fullName,addedTime FROM t_user where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(addedTime);
-- 本月  
SELECT fullName,addedTime FROM t_user WHERE DATE_FORMAT( addedTime, '%Y%m' ) = DATE_FORMAT( CURDATE() , '%Y%m' );
-- 上一月  
SELECT fullName,addedTime FROM t_user WHERE PERIOD_DIFF( date_format( now( ) , '%Y%m' ) , date_format( addedTime, '%Y%m' ) ) =1; 
-- 查询本季度数据  
select fullName,addedTime FROM t_user where QUARTER(addedTime)=QUARTER(now()); 
-- 查询上季度数据  
select fullName,addedTime FROM t_user where QUARTER(addedTime)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));  
-- 查询本年数据  
select fullName,addedTime FROM t_user where YEAR(addedTime)=YEAR(NOW());  
-- 查询上年数据  
select fullName,addedTime FROM t_user where year(addedTime)=year(date_sub(now(),interval 1 year));  
-- 查询距离当前现在6个月的数据  
select fullName,addedTime FROM t_user where addedTime between date_sub(now(),interval 6 month) and now();  
 
-- 查询当前这周的数据  
SELECT fullName,addedTime FROM t_user WHERE YEARWEEK(date_format(addedTime,'%Y-%m-%d')) = YEARWEEK(now());  
-- 查询上周的数据  
SELECT fullName,addedTime FROM t_user WHERE YEARWEEK(date_format(addedTime,'%Y-%m-%d')) = YEARWEEK(now())-1;  
-- 查询上个月的数据   
select fullName,addedTime FROM t_user where date_format(addedTime,'%Y-%m')=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y-%m'); 
-- 查询当前月份的数据
select fullName,addedTime FROM t_user where DATE_FORMAT(addedTime,'%Y%m') = DATE_FORMAT(CURDATE(),'%Y%m');
select fullName,addedTime FROM t_user where date_format(addedTime,'%Y-%m')=date_format(now(),'%Y-%m'); 
 
-- 查询指定时间段的数据
select fullName,addedTime FROM t_user where addedTime between  '2017-1-1 00:00:00'  and '2018-1-1 00:00:00';   
select fullName,addedTime FROM t_user where addedTime &gt;='2017-1-1 00:00:00'  and addedTime &lt; '2018-1-1 00:00:00';
</code></pre>
<h2 id="2-时间分组查询">2、时间分组查询</h2>
<h3 id="1-查询方式">1、查询方式</h3>
<pre><code class="language-mysql">&lt;!-- 按日查询 --&gt;  
SELECT DATE_FORMAT(created_date,'%Y-%m-%d') as time,sum(money) money FROM o_finance_detail where org_id = 1000  GROUP BY  time  
&lt;!-- 按月查询 --&gt;  
SELECT DATE_FORMAT(created_date,'%Y-%m') as time,sum(money)  money FROM o_finance_detail where org_id = 1000  GROUP BY  time  
&lt;!-- 按年查询 --&gt;  
SELECT DATE_FORMAT(created_date,'%Y') as time,sum(money)  money FROM o_finance_detail where org_id = 1000  GROUP BY  time   
&lt;!-- 按周查询 --&gt;  
SELECT DATE_FORMAT(created_date,'%Y-%u') as time,sum(money)  money FROM o_finance_detail where org_id = 1000  GROUP BY  time
</code></pre>
<h3 id="2-时间格式化规则">2、时间格式化规则</h3>
<p>DATE_FORMAT(date,format)<br>
根据format字符串格式化date值。下列修饰符可以被用在format字符串中：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>%M</td>
<td>月名字(January……December)</td>
</tr>
<tr>
<td>%W</td>
<td>星期名字(Sunday……Saturday)</td>
</tr>
<tr>
<td>%D</td>
<td>有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）</td>
</tr>
<tr>
<td>%Y</td>
<td>年, 数字, 4 位</td>
</tr>
<tr>
<td>%y</td>
<td>年, 数字, 2 位</td>
</tr>
<tr>
<td>%a</td>
<td>缩写的星期名字(Sun……Sat)</td>
</tr>
<tr>
<td>%d</td>
<td>月份中的天数, 数字(00……31)</td>
</tr>
<tr>
<td>%e</td>
<td>月份中的天数, 数字(0……31)</td>
</tr>
<tr>
<td>%m</td>
<td>月, 数字(01……12)</td>
</tr>
<tr>
<td>%c</td>
<td>月, 数字(1……12)</td>
</tr>
<tr>
<td>%b</td>
<td>缩写的月份名字(Jan……Dec)</td>
</tr>
<tr>
<td>%j</td>
<td>一年中的天数(001……366)</td>
</tr>
<tr>
<td>%H</td>
<td>小时(00……23)</td>
</tr>
<tr>
<td>%k</td>
<td>小时(0……23)</td>
</tr>
<tr>
<td>%h</td>
<td>小时(01……12)</td>
</tr>
<tr>
<td>%I</td>
<td>小时(01……12)</td>
</tr>
<tr>
<td>%l</td>
<td>小时(1……12)</td>
</tr>
<tr>
<td>%i</td>
<td>分钟, 数字(00……59)</td>
</tr>
<tr>
<td>%r</td>
<td>时间,12 小时(hh:mm:ss [AP]M)</td>
</tr>
<tr>
<td>%T</td>
<td>时间,24 小时(hh:mm:ss)</td>
</tr>
<tr>
<td>%S</td>
<td>秒(00……59)</td>
</tr>
<tr>
<td>%s</td>
<td>秒(00……59)</td>
</tr>
<tr>
<td>%p</td>
<td>AM或PM</td>
</tr>
<tr>
<td>%w</td>
<td>一个星期中的天数(0=Sunday ……6=Saturday ）</td>
</tr>
<tr>
<td>%U</td>
<td>星期(0……52), 这里星期天是星期的第一天</td>
</tr>
<tr>
<td>%u</td>
<td>星期(0……52), 这里星期一是星期的第一天</td>
</tr>
<tr>
<td>%%</td>
<td>一个文字“%”。</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[XML中不能出现<,导致Mybatis的Mapper无法使用sql的<]]></title>
        <id>https://Eakamm.github.io/post/xml-zhong-bu-neng-chu-xian-lessdao-zhi-mybatis-de-mapper-wu-fa-shi-yong-sql-de-less/</id>
        <link href="https://Eakamm.github.io/post/xml-zhong-bu-neng-chu-xian-lessdao-zhi-mybatis-de-mapper-wu-fa-shi-yong-sql-de-less/">
        </link>
        <updated>2021-03-05T06:31:36.000Z</updated>
        <content type="html"><![CDATA[<p>在进行项目开发的时候，使用如下sql</p>
<pre><code class="language-xml">  &lt;select id=&quot;selectIntersectTime&quot; parameterType=&quot;TbPurchaseTime&quot; resultMap=&quot;TbPurchaseTimeResult&quot;&gt;
        select
            *
        from
            tb_purchase_time
        where
            (start_time &gt; #{purchaseStartTime} AND start_time &lt; #{purchaseEndTime})
            OR
            (start_time &lt;= #{purchaseStartTime} AND end_time &gt;= #{purchaseEndTime})
            OR
            (end_time &gt; #{purchaseStartTime} AND end_time &lt; #{purchaseEndTime})
    &lt;/select&gt;
</code></pre>
<p>小于号会报错</p>
<pre><code>Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 64; 元素内容必须由格式正确的字符数据或标记组成。
</code></pre>
<p>在mybatis中sql是写在xml映射文件中的，如果sql中有一些特殊字符的话，在解析xml文件的时候就会被转义，如若不希望被转义，那该怎么办呢？</p>
<h2 id="方法一使用特殊转义字符">方法一：使用特殊转义字符</h2>
<p>例如，&gt;=开始日期 并且&lt;=结束日期<br>
<code>&amp;gt;</code> &gt;  大于号<br>
<code>&amp;lt;</code> &lt;  小于号</p>
<pre><code class="language-xml">&lt;select id=&quot;selectIntersectTime&quot; parameterType=&quot;TbPurchaseTime&quot; resultMap=&quot;TbPurchaseTimeResult&quot;&gt;
        select
            *
        from
            tb_purchase_time
        where
            (start_time &gt; #{purchaseStartTime} AND start_time &amp;lt; #{purchaseEndTime})
            OR
            (start_time &amp;lt;= #{purchaseStartTime} AND end_time &gt;= #{purchaseEndTime})
            OR
            (end_time &gt; #{purchaseStartTime} AND end_time &amp;lt; #{purchaseEndTime})
    &lt;/select&gt;
</code></pre>
<h2 id="方法二使用cdata-符号">方法二：使用<![CDATA[ ]]]]><![CDATA[>符号</h2>
<p>这里面的内容将不被解析</p>
<pre><code class="language-xml">&lt;select id=&quot;selectIntersectTime&quot; parameterType=&quot;TbPurchaseTime&quot; resultMap=&quot;TbPurchaseTimeResult&quot;&gt;
        select
            *
        from
            tb_purchase_time
        where
            (start_time &gt; #{purchaseStartTime} AND start_time &lt;![CDATA[&lt;]]&gt; #{purchaseEndTime})
            OR
            (start_time &lt;![CDATA[&lt;=]]&gt; #{purchaseStartTime} AND end_time &gt;= #{purchaseEndTime})
            OR
            (end_time &gt; #{purchaseStartTime} AND end_time &lt;![CDATA[&lt;]]&gt; #{purchaseEndTime})
    &lt;/select&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sql 尽量避免使用IN或NOT IN]]></title>
        <id>https://Eakamm.github.io/post/sql-jin-liang-bi-mian-shi-yong-in-huo-not-in/</id>
        <link href="https://Eakamm.github.io/post/sql-jin-liang-bi-mian-shi-yong-in-huo-not-in/">
        </link>
        <updated>2021-01-07T07:20:03.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://www.cnblogs.com/totian/p/7597300.html">www.cnblogs.com</a><br>
WHY？<br>
====</p>
</blockquote>
<p>IN 和 NOT IN 是比较常用的关键字，为什么要尽量避免呢？</p>
<p><strong>1、效率低</strong></p>
<p>可以参看我之前遇到的一个例子（<a href="http://www.cnblogs.com/hydor/p/4288739.html">[小问题笔记（九）] SQL 语句 Not IN 效率低，用 NOT EXISTS 试试</a>）</p>
<p><strong>2、容易出现问题，或查询结果有误</strong> （不能更严重的缺点）</p>
<p>以 IN 为例。建两个表：test1 和 test2</p>
<pre><code class="language-mysql">create table test1 (id1 int)
create table test2 (id2 int)

insert into test1 (id1) values (1),(2),(3)
insert into test2 (id2) values (1),(2)
</code></pre>
<p><strong>我想要查询，在 test2 中存在的  test1 中的 id</strong> 。使用 IN 的一般写法是：</p>
<pre><code class="language-mysql">select id1 from test1 
where id1 in (select id2 from test2)
</code></pre>
<p>结果是：<img src="https://images2015.cnblogs.com/blog/599583/201604/599583-20160414142918832-546624557.jpg" alt="" loading="lazy">  OK 木有问题！</p>
<p>但是如果我一时手滑，写成了：</p>
<pre><code class="language-mysql">select id1 from test1 
where id1 in (select id1 from test2)
</code></pre>
<p>不小心把 id2 写成 id1 了 ，会怎么样呢?</p>
<p>结果是：<img src="https://images2015.cnblogs.com/blog/599583/201604/599583-20160414143058535-1581017335.jpg" alt="" loading="lazy"> <br>
EXCUSE ME！ 为什么不报错？</p>
<p>单独查询 select id1 from test2 是一定会报错: 消息 207，级别 16，状态 1，第 11 行 列名'id1' 无效。</p>
<p>然而使用了 IN 的子查询就是这么敷衍，直接查出 1 2 3</p>
<p>这仅仅是容易出错的情况，自己不写错还没啥事儿，下面来看一下 NOT IN 直接查出错误结果的情况：</p>
<p>给 test2 插入一个空值：</p>
<pre><code class="language-mysql">insert into test2 (id2) values (NULL)
</code></pre>
<p><strong>我想要查询，在 test2 中不存在的  test1 中的 id 。</strong></p>
<pre><code class="language-mysql">select id1 from test1 
where id1 not in (select id2 from test2)
</code></pre>
<p>结果是：<img src="https://images2015.cnblogs.com/blog/599583/201604/599583-20160414144719566-1529158930.jpg" alt="" loading="lazy"> 空白！ 显然这个结果不是我们想要的。我们想要 3。为什么会这样呢？</p>
<p>原因是：NULL 不等于任何非空的值啊！如果 id2 只有 1 和 2， 那么 3&lt;&gt;1 且 3&lt;&gt;2 所以 3 输出了，但是 id2 包含空值，那么 3 也不等于 NULL 所以它不会输出。</p>
<p>（跑题一句：建表的时候最好不要允许含空值，否则问题多多。）</p>
<h1 id="how">HOW？</h1>
<p><strong>1、用 EXISTS 或 NOT EXISTS 代替</strong></p>
<pre><code class="language-mysql">select *  from test1 
   where EXISTS (select * from test2  where id2 = id1 )

select *  FROM test1  
 where NOT EXISTS (select * from test2  where id2 = id1 )
</code></pre>
<p><strong>2、用 JOIN 代替</strong></p>
<pre><code class="language-mysql">select id1 from test1 
   INNER JOIN test2 ON id2 = id1 
   
 select id1 from test1 
   LEFT JOIN test2 ON id2 = id1 
   where id2 IS NULL
</code></pre>
<p>妥妥的没有问题了！</p>
<p>PS：那我们死活都不能用 IN 和 NOT IN 了么？并没有，一位大神曾经说过，如果是<strong>确定且有限的集合</strong>时，可以使用。如 IN （0，1，2）。</p>
<p>转发自：http://www.cnblogs.com/hydor/p/5391556.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL编写技巧]]></title>
        <id>https://Eakamm.github.io/post/sql-bian-xie-ji-qiao/</id>
        <link href="https://Eakamm.github.io/post/sql-bian-xie-ji-qiao/">
        </link>
        <updated>2020-11-04T06:55:58.000Z</updated>
        <content type="html"><![CDATA[<p>1、使用union代替or<br>
力扣习题：<a href="https://leetcode-cn.com/problems/big-countries/">595. 大的国家</a><br>
union将查询的结果合并到一起，会去重，重复数据只会出现一次。<br>
union all 将结果全部列出</p>
<p>原始数据</p>
<pre><code class="language-sql">-- websites
+----+--------------+---------------------------+-------+---------+
| id | name         | url                       | alexa | country |
+----+--------------+---------------------------+-------+---------+
| 1  | Google       | https://www.google.cm/    | 1     | USA     |
| 2  | 淘宝          | https://www.taobao.com/   | 13    | CN      |
| 3  | 菜鸟教程      | http://www.runoob.com/    | 4689  | CN      |
| 4  | 微博          | http://weibo.com/         | 20    | CN      |
| 5  | Facebook     | https://www.facebook.com/ | 3     | USA     |
| 7  | stackoverflow | http://stackoverflow.com/ |   0 | IND     |
+----+---------------+---------------------------+-------+---------+
-- apps
+----+------------+-------------------------+---------+
| id | app_name   | url                                   | country |
+----+------------+-------------------------+---------+
|  1 | QQ APP     | http://im.qq.com/            | CN         |
|  2 | 微博 APP    | http://weibo.com/           | CN         |
|  3 | 淘宝 APP    | https://www.taobao.com/  | CN         |
+----+------------+-------------------------+---------+
</code></pre>
<p><strong>union</strong></p>
<pre><code class="language-sql">SELECT country FROM Websites
UNION
SELECT country FROM apps
</code></pre>
<p><strong>union all</strong></p>
<pre><code class="language-sql">SELECT country FROM Websites
UNION ALL
SELECT country FROM apps
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lombok的坑大小写问题]]></title>
        <id>https://Eakamm.github.io/post/lombok-de-keng-da-xiao-xie-wen-ti/</id>
        <link href="https://Eakamm.github.io/post/lombok-de-keng-da-xiao-xie-wen-ti/">
        </link>
        <updated>2020-10-22T01:56:50.000Z</updated>
        <summary type="html"><![CDATA[<p>在我使用post请求提交数据的时候，使用@Data注释的实体类set方法不能正常使用，通过查找资料发现是大小写问题。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在我使用post请求提交数据的时候，使用@Data注释的实体类set方法不能正常使用，通过查找资料发现是大小写问题。</p>
<!-- more -->
<p>我Post提交的请求数据是</p>
<pre><code class="language-json">{
      &quot;vId&quot;: 1,
     &quot;dIds&quot;: [6,7]
}
</code></pre>
<p>后端的实体类为VoteDetailRelVo，使用了@Data注解。</p>
<pre><code class="language-java">@Data
public class VoteDetailRelVo {

    private Long vId;

    private List&lt;Long&gt; dIds;
}
</code></pre>
<p>lombok自动生成的get/set方法变为了<code>getVId/setVId</code>与<code>getDIds/setDIds</code>。</p>
<p>一般JavaBean属性以小写字母开头，驼峰命名格式，相应的 getter/setter 方法是 get/set 接上首字母大写的属性名。例如：属性名为userName，其对应的getter/setter 方法是 getUserName/setUserName。</p>
<p>但是，还有一些特殊情况：</p>
<p>1、如果属性名的第二个字母大写，那么该属性名直接用作 getter/setter 方法中 get/set 的后部分，就是说大小写不变。例如属性名为uName，方法是getuName/setuName。</p>
<p>2、如果前两个字母是大写（一般的专有名词和缩略词都会大写），也是属性名直接用作 getter/setter 方法中 get/set 的后部分。例如属性名为URL，方法是getURL/setURL。</p>
<p>3、如果首字母大写，也是属性名直接用作 getter/setter 方法中 get/set 的后部分。例如属性名为Name，方法是getName/setName，这种是最糟糕的情况，会找不到属性出错，因为默认的属性名是name。</p>
<p>所以Lombok生成的的get/set方法会出现问题。<br>
详解可见https://www.cnblogs.com/sunTin/p/7172932.html</p>
]]></content>
    </entry>
</feed>